# @Author            : Dario Gonzalez
# @Date              : 2020-02-23
# @Last Modified by  : Dario Gonzalez
# @Last Modified time: 2020-02-23

import io
import os

from PIL import Image as Pillow

from imglibexploiters.iimage import IImage
from properties.properties import COMPRESSION_PARAM, RESAMPLING_PARAM
from utils import imglogger
from utils.commons import (get_format_from_properties,
                           get_mimetype_from_properties)
from utils.exceptions import (CompressionError, ImageProcessorError,
                              ResizingError)

logger = imglogger.logger


class ImagePIL(IImage):

    def __init__(self, img_path, img_file_name):

        self.file_ext = os.path.splitext(img_file_name)[1].split(".")[1].lower()
        self.img_format = get_format_from_properties(self.file_ext)
        self.mimetype = get_mimetype_from_properties(self.file_ext)

        if not self.img_format or not self.mimetype:
            raise ImageProcessorError("")

        self.image = None

        self.width = 0
        self.height = 0

        self.img_name = ""
        self.img_path = img_path

    def open_img(self, img_file_name):
        logger.debug("Opening image {path}{name}".format(
            path=self.img_path,
            name=img_file_name
        ))
        try:
            self.image = Pillow.open(self.img_path + img_file_name)
            logger.debug("Image successfully opened")
        except IOError as e:
            logger.debug("Image {path}{name} not found - {error}".format(
                path=self.img_path,
                name=img_file_name,
                error=repr(e)
            ))
            self.image = None

    def is_img_opened(self):
        return False if not self.image else True

    def resize(self, width=None, height=None):
        logger.debug("Resizing image...")
        try:
            if width and height:
                self.image = self.image.resize((width, height), resample=RESAMPLING_PARAM)
            else:
                self.image = self.image.resize((self.width, self.height), resample=RESAMPLING_PARAM)
            logger.debug("Image resized")
        except Exception:
            logger.error("Resize error - Probably height or width over maximum value")
            raise ResizingError("")

    def compress(self):
        logger.debug("Compressing image...")
        try:
            self.image.save(self.img_path + self.img_name, self.img_format, optimize=True, quality=COMPRESSION_PARAM)
            logger.debug("Image compressed")
        except IOError as e:
            logger.critical("Could not save compressed image in {name} - {error}".format(
                name=self.img_name,
                error=repr(e)
            ))
            raise CompressionError("")

    def get_mimetype(self):
        return self.mimetype

    def get_img_name(self):
        return self.img_name

    def set_img_name(self, img_name):
        self.img_name = img_name

    def get_img_path(self):
        return self.img_path

    def set_img_path(self, img_path):
        self.img_path = img_path

    def get_file_ext(self):
        return self.file_ext

    def set_file_ext(self, file_ext):
        self.file_ext = file_ext

    def get_width(self):
        return self.width

    def set_width(self, width):
        if type(width) is int:
            self.width = width
        else:
            logger.warning("Given width is not an int")
            raise ValueError

    def get_height(self):
        return self.height

    def set_height(self, height):
        if type(height) is int:
            self.height = height
        else:
            logger.warning("Given height is not an int")
            raise ValueError
